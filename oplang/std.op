(global @OP_VERSION "a0.1")
(global @if (func-inline @:cond @:case @:else
    #(do ((bool :cond) :case :else))
))
(global @if! (func-inline @:cond @:case @:else
    #(do ((not :cond) :case :else))
))

(global @set! (func-inline @:var @:f #{
    (if! (string? :var)
        #(error (.. "bad argument #1 (expected string, got " (type :var) ")"))
    )
    (if! (func? :f)
        #(error (.. "bad argument #2 (expected function, got " (type :f) ")"))
    )
    (set :var (:f (get :var)))
}))
(global @swap! (func-inline @:a @:b #{
    (if! (string? :a)
        #(error (.. "bad argument #1 (expected string, got " (type :a) ")"))
    )
    (if! (string? :b)
        #(error (.. "bad argument #2 (expected string, got " (type :b) ")"))
    )
    (set @temp (get :a))
    (set :a (get :b))
    (set :b temp)
    (del @temp)
}))
(global @inc (func-inline @:var #{
    (if! (string? :var)
        #(error (.. "bad argument #1 (expected string, got " (type :var) ")"))
    )
    (set :var (+ (get :var) 1))
}))
(global @dec (func-inline @:var #{
    (if! (string? :var)
        #(error (.. "bad argument #1 (expected string, got " (type :var) ")"))
    )
    (set :var (- (get :var) 1))
}))

(global @not (func @v
    #((bool v) false true)
))
(global @or (func @a @b
    #((bool a) true
      ((bool b) true false)
    )
))
(global @and (func @a @b
    #((bool a)
        ((bool b) true false)
        false
    )
))

(global @div? (func @a @b
    #(= (% a b) 0)
))
(global @even? (func @a
    #(div? a 2)
))
(global @odd? (func @a
    #(not (div? a 2))
))
(global @pos? (func @a
    #(= a (abs a))
))
(global @neg? (func @a
    #(not (pos? a))
))

(global @number? (func @v
    #(= (type v) "number")
))
(global @bool? (func @v
    #(= (type v) "boolean")
))
(global @string? (func @v
    #(= (type v) "string")
))
(global @table? (func @v
    #(= (type v) "table")
))
(global @func? (func @v
    #(= (type v) "function")
))
(global @nil? (func @v
    #(= (type v) "nil")
))
(global @some? (func @v
    #(not (nil? v))
))

(global @map (func @list @f #{
    (if! (table? list)
        #(error (.. "bad argument #1 (expected table, got " (type list) ")"))
    )
    (if! (func? f)
        #(error (.. "bad argument #2 (expected function, got " (type f) ")"))
    )
    (for @k @v list #(seti list k (f v)))
    list
}))
(global @reduce (func @f @list #{
    (if! (table? list)
        #(error (.. "bad argument #1 (expected table, got " (type list) ")"))
    )
    (if! (func? f)
        #(error (.. "bad argument #2 (expected function, got " (type f) ")"))
    )
    (set @res)
    (for @k @v list
        #(if (nil? res)
            #(set @res v)
            #(set @res (f res v))
        )
    )
    res
}))
(global @check (func @f @list #{
    (if! (func? f)
        #(error (.. "bad argument #1 (expected function, got " (type f) ")"))
    )
    (if! (table? list)
        #(error (.. "bad argument #2 (expected table, got " (type list) ")"))
    )
    (forn @i 1 (- (len list) 1)
        #(if (not (f (list i) (list (+ i 1))))
            false
        )
    )
    true
}))

(global @randint (func @start @stop #{
    (if! (number? start)
        #(error (.. "bad argument #1 (expected number, got " (type start) ")"))
    )
    (if (nil? stop) #{
        (set @stop start)
        (set @start 0)
    })
    (if (> start stop) #(swap! @start @stop))
    (if! (number? stop)
        #(error (.. "bad argument #2 (expected number, got " (type stop) ")"))
    )
    (+ (round (* (random) (- stop start))) start)
}))